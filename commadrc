#!/bin/bash

VERSION="2019.09.06"

usage() {
cat<<EOS
Usage: commad [-n] [+n] [<args>] 
  <no arg>     Change directory HOME and stack PWD to COMMAD_STACK
  <dir>        Change directory <dir> and stack PWD to COMMAD_STACK

  -l, --list   Show COMMAD_STACK
  -c, --clear  Clear COMMAD_STACK
  --version    Print version

  -1           Change previous directory
  -2           Change 2 previous directory
  -n           Change n previous directory
  +1           Change next directory
  +2           Change 2 next directory
  +n           Change n next directory
EOS
}

function repeat() {
    number=$1
    shift
    for n in $(seq $number); do
      $@
    done
}

# ## Initialize
COMMAD_STACK=${COMMAD_STACK:-$PWD}
COMMAD_POINTER=${COMMAD_POINTER:-0}

function stackd {
    # , replaced for cd

    if [[ $# = 0 ]]; then
        cd $HOME
    elif [[ -f $@ ]]; then
        cd "$(dirname $@)"
    elif [[ -d $@ ]]; then
        cd ~
        cd "$@"
    else
        echo -en "$@: Not found. Do you make it as dirctory? [y/N] " 
        read  response
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
            mkdir -p "$@"
        fi
        cd "$@"
    fi
    [[ $PWD = $OLDPWD ]] && return;

    COMMAD_STACK=$(echo $COMMAD_STACK | head -$(( $COMMAD_POINTER + 1 )) )
    COMMAD_STACK=${COMMAD_STACK}"\n$PWD"
    (( COMMAD_POINTER += 1 ))
}

function _prevd {
    # prevd for cd previous directory

    [[ $COMMAD_POINTER -le 0 ]] && return

    (( COMMAD_POINTER -= 1 ))
    (( i = 0 ))
    echo $COMMAD_STACK | while read line; do
        if [[ $i = $COMMAD_POINTER ]]; then
            cd $line
            return
        fi
        (( i += 1 ))
    done
}

function prevd {
    [[ "$1" =~ ^[0-9]+$ ]] && n=$1 || n=0
    repeat $n _prevd
}

function _nextd {
    # nextd for cd next directory

    stack_len=$(echo $COMMAD_STACK | wc -l)
    if (( COMMAD_POINTER + 1 >= $stack_len )) ; then
        return
    fi

    (( COMMAD_POINTER += 1 ))
    (( i = 0 ))
    echo $COMMAD_STACK | while read line; do
        if [[ $i = $COMMAD_POINTER ]]; then
            cd $line
            return
        fi
        (( i += 1 ))
    done
}

function nextd {
    [[ "$1" =~ ^[0-9]+$ ]] && n=$1 || n=0
    repeat $n _nextd
}

function listd {
    GREEN='\033[0;32m'
    NC='\033[0m' # No Color

    (( i = 0 ))
    echo $COMMAD_STACK | while read line; do
        [[ $i < $COMMAD_POINTER ]] && prefix="- "
        [[ $i > $COMMAD_POINTER ]] && prefix="+ "
        [[ $i = $COMMAD_POINTER ]] && prefix="${GREEN}* ${NC}"
        echo "$i $prefix$line"
        (( i += 1 ))
    done
}

function cleard {
    COMMAD_POINTER=0
    COMMAD_STACK=""
}

function commad {
    OPT=$1
    case "$OPT" in
        '-h'|'--help' )
            usage
            ;;
        '--version' )
            echo $VERSION
            ;;
        '-l'|'--list' )
            cleard
            ;;
        '-c'|'--clear' )
            cleard
            ;;
        -*)
            n=$(echo "$OPT" | awk -F'-' '{print $NF}')
            prevd $n
            ;;
        +*)
            n=$(echo "$OPT" | awk -F'+' '{print $NF}')
            nextd $n
            ;;
        *)
            stackd $@
            ;;
    esac
}
